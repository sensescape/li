# Author: Geraldine Sarmiento


# Texture Shaders
# Brett Camper and Peter Richardson
# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    scale: 5.

    # Order functions
    order_add_9: function () { return (feature.sort_rank * 20 + 9); }
    order_add_8: function () { return (feature.sort_rank * 20 + 8); }
    order_add_7: function () { return (feature.sort_rank * 20 + 7); }
    order_add_6: function () { return (feature.sort_rank * 20 + 6); }
    order_add_5: function () { return (feature.sort_rank * 20 + 5); }
    order_add_4: function () { return (feature.sort_rank * 20 + 4); }
    order_add_3: function () { return (feature.sort_rank * 20 + 3); }
    order_add_2: function () { return (feature.sort_rank * 20 + 2); }
    order_add_1: function () { return (feature.sort_rank * 20 + 1); }
    feature_order: function() { return feature.sort_rank; }
    order: function () { return (feature.sort_rank * 20) || 0; }
    order_sub_1: function () { return (feature.sort_rank * 20 - 1); }
    order_sub_2: function () { return (feature.sort_rank * 20 - 2); }
    order_sub_3: function () { return (feature.sort_rank * 20 - 3); }
    order_sub_4: function () { return (feature.sort_rank * 20 - 4); }
    order_sub_5: function () { return (feature.sort_rank * 20 - 5); }
    order_sub_6: function () { return (feature.sort_rank * 20 - 6); }
    order_sub_7: function () { return (feature.sort_rank * 20 - 7); }
    order_sub_8: function () { return (feature.sort_rank * 20 - 8); }
    order_sub_9: function () { return (feature.sort_rank * 20 - 9); }

    pseudoRandomColor: |
        function() {
            return [
                0.5 * (parseInt(feature.id, 12) / 100 % 1),     // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 10000 % 1),   // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

    building_extrude_height: |                  # building extrude height logic
        function() { return feature.height || 70; }

    text_font_family: 'Open Sans'

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff

    Aldrich:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
          url: fonts/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff

    Open Sans:
        - weight: 300 # Light
          url: fonts/OpenSans-Light.woff
        - weight: normal # Regular
          url: fonts/OpenSans-Regular.woff
        - weight: normal # Regular
          style: italic
          url: fonts/OpenSans-Italic.woff
        - weight: 600 # Semi Bold
          url: fonts/OpenSans-Semibold.woff
        - weight: 600 # Semi Bold
          style: italic
          url: fonts/OpenSans-SemiboldItalic.woff
        - weight: bold
          url: fonts/OpenSans-Bold.woff

textures:
    line-texture:
        url: images/stipple2-r.png

    red:
        width: 1
        height: 1
        data: [255, 0, 0, 255]

    blue:
        width: 1
        height: 1
        data: [0, 0, 255, 255]

    yellow:
        width: 1
        height: 1
        data: [255, 255, 0, 255]

    purple:
        width: 1
        height: 1
        data: [255, 0, 255, 255]


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                # style: texture-2-multi-zooms
                order: global.feature_order
                color: [1.000,1.000,1.000]

    water:
        data: { source: mapzen, layer: water }
        # draw:
        #     polygons:
        #         style: water-texture
        #         # style: texture-terrain-conservation
        #         order: global.feature_order
        #         color: [0.000,0.000,0.000]

        lakes:
            filter: { kind: [lake, water], $zoom: { min: 4 } }
            draw:
                polygons:
                    order: global.feature_order
                    style: lakes-texture

        oceans:
            filter: { kind: ocean }
            draw:
                polygons:
                    order: global.feature_order
                    style: water-texture

        # lakes:
        #     filter:
        #         all:
        #             - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
        #         # WARNING: any area filters here must match the area filters in the water-boundaries-not_ocean layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         polygons:
        #             color: blue

        # other_areas:
        #     filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 10 }, area: { min: 100 } }
        #     draw:
        #         polygons:
        #             color: red

        playas:
            filter: { kind: playa, $zoom: { min: 4 } }
            draw:
                polygons:
                    style: playas-texture
                    order: global.feature_order
                    # color: [0.500,0.500,0.500]

        # boundaries:
        #     filter: { boundary: true, kind: ocean }
        #     # don't animate early, save the fan, save the planet!
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 style: coastline-glow
        #                 order: global.feature_order
        #                 width: [[4,0px],[11,2.5px],[14,6px],[16,10px]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round
        #     animated:
        #         filter: { $zoom: { min: 16 } }
        #         draw:
        #             lines:
        #                 style: water-boundaries-animated
        #                 order: global.feature_order
        #                 width: [[16,21px],[18,30px],[20,36]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round

        # boundaries-not_ocean:
        #     filter:
        #         all:
        #             - boundary: true
        #             - not: { kind: [ocean, playa] }
        #             - $zoom: { min: 8 }
        #         # WARNING: any area filters here must match the area filters in the lakes layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         lines:
        #             order: global.feature_order
        #             color: [1.000,1.000,1.000]
        #             width: [[8,0px],[13,1px],[15,1.25px],[20,3px]]
        #             join: round

        #     boundaries-not_ocean-riverbank:
        #         # river boundaries like the thames in london, la seine in paris
        #         filter: { kind: riverbank }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[8,0px],[13,1px],[15,1.25px],[20,8px]]

    roads:
        data: { source: mapzen }
        enabled: true
        filter: { not: { kind: rail } }
        draw:
            lines:
                width: 1px
                order: global.order
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15} }
            draw:
                lines:
                    outline:
                        order: global.order
        bridges_and_tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    outline:
                        order: global.order

        natural_earth_roads:
            filter:
                - $zoom: { min: 5, max: 8 }
            draw:
                lines:
                    color: [0.000,0.000,0.000]
                    width: 1px

            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        width: 0.5px

            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        width: 0.5px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false

        highway:
            filter:
                kind: highway
                $zoom: { min: 8 }

            highway-z8:
                filter:
                    $zoom: { min: 8, max: 11 }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        # color: [1.000,0.000,0.000]
                        width: 1px

            highway-z11:
                filter:
                    $zoom: { min: 11 }
                draw:
                    lines:
                        style: lines
                        order: global.order
                        color: [0.000,0.000,0.000]
                        # color: [1.000,0.000,0.000]
                        width: [[8,0px],[18,8px]]
                        outline:
                            color: [0.920,0.920,0.920]
                            # color: [1.000,0.000,0.000]
                            width: [[8,0.5px],[12,1.5px],[13,2px],[14,4px],[16,10px],[18,16px]]
                    highway-dashed:
                        style: highway-dashed
                        order: global.order_add_3
                        color: [1.000,1.000,1.000]
                        # color: [1.000,0.000,1.000]
                        width: [[8,0px],[11,0.5px],[14,1px],[16,1.5px],[20,2px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            # color: [0.000,0.000,1.000]
                            width: [[8,0.5px],[12,0.5px],[17,4px]]
                    highway-glow:
                        style: lines
                        order: global.order_add_2
                        color: [1.000,1.000,1.000]
                        # color: [0.000,1.000,0.000]
                        width: [[11,0.5px],[13,2px],[15,9px],[16,14px],[18,18px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            # color: [0.000,0.000,1.000]
                            width: [[8,0.5px],[13,0.5px],[17,3px]]

                highway-link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            order: global.order_add_1
                            color: [0.000,0.000,0.000]
                            # color: [1.000,0.000,0.000]
                            width: [[8,0px],[16,0.5px],[18,8px]]
                            outline:
                                color: [1.000,1.000,1.000]
                                # color: [1.000,0.000,0.000]
                                width: [[8,0px],[13,0px],[18,2px]]
                        highway-dashed:
                            visible: false
                        highway-glow:
                            visible: false

                    highway-link-early:
                        filter: { $zoom: { min: 13, max: 15 } }
                        draw:
                            lines:
                                order: 352
                            highway-dashed:
                                visible: false
                        highway-link-early-z17-18:
                            filter: { $zoom: [17, 18]}
                            draw:
                                lines:
                                    visible: false

                highway-tunnel:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            style: lines
                            color: [0.000,0.000,0.000]
                            # color: [1.000,0.000,0.000]
                            outline:
                                color: [0.850,0.850,0.850]
                                # color: [1.000,0.000,0.000]
                        highway-dashed:
                            style: highway-dashed-tunnel
                            visible: true
                            color: [0.000,0.000,0.000]
                            # color: [1.000,0.000,0.000]
                            outline:
                                color: [1.000,1.000,1.000]
                                # color: [1.000,0.000,0.000]
                        highway-glow:
                            visible: true
                            color: [0.400,0.400,0.400]
                            # color: [1.000,0.000,0.000]
                    highway-tunnel-link:
                        filter:
                            is_link: true
                        draw:
                            lines:
                                color: [0.900,0.900,0.900]
                                # color: [1.000,0.000,0.000]
                                outline:
                                    color: [0.750,0.750,0.750]
                            highway-dashed:
                                visible: false
                            highway-glow:
                                visible: false

            # Show 0 width roads one zoom before they have width, so they can scale up instead of popping in
            # highway-z17:
            #     filter:
            #         $zoom: { min: 16 }
            #     draw:
            #         highway-casing:
            #             visible: true
            #             order: global.order_sub_2
            #             color: [1.000,0.000,0.000]
            #             width: [[8,0px],[16,10px],[17,18px],[18,34px],[19,45px]]

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [0.000,0.000,0.000]
                    # color: [1.000,0.000,0.000]
                    width: [[8, 0.5px], [15, 0.5px], [16, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        style: lines
                        order: global.order
                        color: [0.000,0.000,0.000]
                        # color: [1.000,0.000,0.000]
                        width: [[8, 0.5px], [15, 0.1px], [16, 3px], [18, 12px]]
                        outline:
                            color: [1.000,1.000,1.000]
                            # color: [1.000,0.000,0.000]
                            width: [[8, 0px], [12, 0.0px], [13, 1px], [15, 1px], [16, 1.5px], [18, 3px]]
                    roads-dashed:
                        style: roads-dashed
                        order: global.order_add_1
                        color: [0.000,0.000,0.000]
                        # color: [1.000,0.000,0.000]
                        width: [[8, 0.5px], [15, 0.5px], [16, 1.25px], [18, 2.5px]]

                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [0.000,0.000,0.000]
                            # color: [1.000,0.000,0.000]
                            width: [[8, 0.5px], [15, 3px], [16, 8px], [18, 18px]]
                            outline:
                                color: [1.000,1.000,1.000]
                                # color: [1.000,0.000,0.000]
                                width: [[8, 0px], [12, 0.25px], [14, 1px], [15, 2px], [16, 2px], [18, 3px]]
                        roads-dashed:
                            color: [0.000,0.000,0.000]

            #         tunnel:
            #             filter: { is_tunnel: true, $zoom: { min: 13 } }
            #             draw:
            #                 lines:
            #                     color: [0.900,0.900,0.900]
            #                     # color: [1.000,0.000,0.000]
            #                     outline:
            #                         color: [0.750,0.750,0.750]
            #                 roads-dashed:
            #                     style: roads-dashed-tunnel
            #                     color: [0.750,0.750,0.750]
            #         # labels-trunk_primary-route-z14:
            #         #     filter: { $zoom: { min: 14 } }
            #         #     draw:
            #         #         text-blend-order:
            #         #             priority: 51
            #         #             visible: true
            #         #             text_source: global.ux_language_text_source_road_ref_and_name
            #         #             font:
            #         #                 weight: 600
            #         #                 size: [[15,12px],[20,14px]]
            #         #                 stroke: { color: global.roads_text_stroke, width: 4px }
            #     # labels-trunk-primary-z14:
            #     #     filter: { $zoom: 14 }
            #     #     draw:
            #     #         text-blend-order:
            #     #             priority: 51
            #     #             text_source: global.ux_language_text_source
            #     #             visible: true
            #     #             font:
            #     #                 size: 10px
            #     #                 stroke: { color: global.roads_text_stroke, width: 3px }

            #     # labels-trunk-primary-z15:
            #     #     filter: { $zoom: { min: 15 } }
            #     #     draw:
            #     #         text-blend-order:
            #     #             priority: 51
            #     #             text_source: global.ux_language_text_source_road_ref_and_name_short
            #     #             visible: true
            #     #             font:
            #     #                 size: [[15,13px],[18,14px]]
            #     #                 stroke: { color: global.roads_text_stroke, width: [[15, 4px], [17, 6px]] }
            # link:
            #     filter: { is_link: true } # on- and off-ramps, etc
            #     draw:
            #         lines:
            #             color: [1.000,1.000,1.000]
            #             # color: [1.000,0.000,0.000]
            #             width: [[8,0px],[16,0.5px],[18,8px]]
            #             outline:
            #                 color: [0.200,0.200,0.200]
            #                 width: [[8,0px],[13,0px],[18,2px]]
            # tunnel:
            #     filter: { is_tunnel: true, $zoom: { min: 13 } }
            #     draw:
            #         lines:
            #             color: [0.900,0.900,0.900]
            #             # color: [1.000,0.000,0.000]
            #             # color: [0.600,0.600,0.600]
            #             outline:
            #                 color: [0.750,0.750,0.750]
            #         roads-dashed:
            #             style: roads-dashed-tunnel
            #             order: global.order_add_1
            #             color: [0.750,0.750,0.750]
            #             width: [[8, 0.5px], [15, 0.5px], [16, 1.5px], [18, 2.5px]]
            # secondary:
            #     filter: { kind_detail: secondary }
            #     draw:
            #         lines:
            #             style: lines
            #             color: [1.000,1.000,1.000]
            #             # color: [1.000,0.000,0.000]
            #             width: [[8, 0.5px], [15, 0.5px], [16, 3px], [18, 12px]]
            #             outline:
            #                 color: [0.200,0.200,0.200]
            #                 # color: [1.000,0.000,0.000]
            #                 width: [[8, 0px], [12, 0.25px], [14, 0.5px], [16, 1.5px], [18, 3px]]
            #         roads-dashed:
            #             style: roads-dashed
            #             order: global.order_add_1
            #             color: [1.000,1.000,1.000]
            #             # color: [1.000,0.000,0.000]
            #             width: [[8, 0.5px], [15, 0.5px], [16, 1.5px], [18, 2.5px]]
                
            #     routes:
            #         filter: { ref: true, $zoom: { min: 12 } }
            #         draw:
            #             lines:
            #                 color: [1.000,1.000,1.000]
            #                 # color: [1.000,0.000,0.000]
            #                 width: [[8, 0.5px], [15, 0.5px], [16, 3px], [18, 12px]]
            #             roads-dashed:
            #                 color: [1.000,1.000,1.000]
            #                 # color: [1.000,0.000,0.000]
            #         tunnel:
            #             filter: { is_tunnel: true, $zoom: { min: 13 } }
            #             draw:
            #                 lines:
            #                     # color: [1.000,0.000,0.000]
            #                     color: [0.900,0.900,0.900]
            #                     outline:
            #                         color: [0.750,0.750,0.750]
            #                 roads-dashed:
            #                     style: roads-dashed-tunnel
            #                     color: [0.750,0.750,0.750]
                    # labels-secondary-routes-z15-up:
                    #     filter: { $zoom: { min: 15 } }
                    #     draw:
                    #         text-blend-order:
                    #             priority: 56
                    #             visible: true
                    #             text_source: global.ux_language_text_source_road_ref_and_name_short
                    #             font:
                    #                 weight: 600
                    #                 size: [[13,10px],[15,13px],[18,14px]]
                    #                 stroke: { color: global.roads_text_stroke, width: 4px }
                # labels-secondary:
                #     filter: { $zoom: { min: 15 } }
                #     draw:
                #         text-blend-order:
                #             priority: 56
                #             visible: true
                #             text_source: global.ux_language_text_source_road_ref_and_name_short
                #             font:
                #                 size: [[15,13px],[18,14px]]
                #                 stroke: { color: global.roads_text_stroke, width: 4px }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        # color: [1.000,0.000,0.000]
                        width: [[8, 0.5px], [15, 0.5px], [16, 3px], [18, 12px]]
                        outline:
                            color: [0.200,0.200,0.200]
                            width: [[8, 0px], [12, 0.25px], [14, 0.5px], [18, 3px]]
                    roads-dashed:
                        visible: false
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            # color: [1.000,0.000,0.000]
                        roads-dashed:
                            visible: true

                    tunnel:
                        filter: { is_tunnel: true }
                        draw:
                            lines:
                                # color: [1.000,0.000,0.000]
                                color: [0.600,0.600,0.600]
                                outline:
                                    color: [0.250,0.250,0.250]

                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 0.5px], [15, 0.5px], [16, 1px]]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            # color: [1.000,0.000,0.000]
                            width: [[8, 0.5px], [15, 0.5px], [16, 1.5px], [18, 3px]]
                            outline:
                                width: [[8,0px],[13,0px],[18,2px]]

                # labels-tertiary:
                #     filter: { $zoom: { min: 16 } }
                #     draw:
                #         text-blend-order:
                #             priority: 57
                #             visible: true
                #             text_source: global.ux_language_text_source_road_ref_and_name_short
                #             font:
                #                 size: [[15,10px],[18,14px]]
                #                 stroke: { color: global.roads_text_stroke, width: 5px }

        # minor_road:
        #     filter:
        #         kind: minor_road
        #         not: { kind_detail: service }
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             # color: [1.000,0.000,0.000]
        #             width: [[8, 0.5px], [15, 0.5px], [16, 3px], [18, 7px]]
        #             outline:
        #                 color: [0.200,0.200,0.200]
        #                 width: [[8, 0px], [12, 0px], [15, 0.5px], [18, 3px]]

        # service_road:
        #     filter: { kind: minor_road, kind_detail: service }
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             # color: [1.000,0.000,0.000]
        #             width: [[8, 0.5px], [15, 0.5px], [16, 1.5px], [18, 3px]]
        #             outline:
        #                 color: [0.200,0.200,0.200]
        #                 width: [[8, 0px], [12, 0px], [15, 0.5px], [18, 1px]]

        # path:
        #     filter:
        #         all:
        #             - kind: [path,portage_way]
        #         not:
        #             - kind_detail: [steps,track,pier]
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             # color: [1.000,0.000,0.000]
        #             width: [[13,0.1px],[16,0.1px],[18,3px]]
        #             outline:
        #                 order: global.order_add_1
        #                 color: [[13,[0.900,0.900,0.900]],[18,[0.300,0.300,0.300]]]
        #                 width: [[13,0.25px],[15,0.25px],[18,1.5px]]
        #                 # dash: [1.0, 0.15]
        #                 # dash_background_color: [0.850,0.850,0.850]

        #     pedestrian:
        #         filter: { kind_detail: pedestrian }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 # color: [1.000,0.000,0.000]
        #                 width: [[13,0.1px],[16,0.1px],[18,3px]]
        #                 outline:
        #                     order: global.order_add_1
        #                     color: [[13,[0.900,0.900,0.900]],[18,[0.300,0.300,0.300]]]
        #                     width: [[13,0.25px],[15,0.25px],[18,1.5px]]
        #                     dash: [1.0, 0.15]
        #                     dash_background_color: [0.850,0.850,0.850]

        #     footway:
        #         filter: { kind_detail: footway }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 # color: [1.000,0.000,0.000]
        #                 width: [[13,0.1px],[16,0.1px],[18,3px]]
        #                 outline:
        #                     order: global.order_add_1
        #                     color: [[13,[0.900,0.900,0.900]],[18,[0.300,0.300,0.300]]]
        #                     width: [[13,0.25px],[15,0.25px],[18,1.5px]]
        #                     dash: [1.0, 0.15]
        #                     dash_background_color: [0.950,0.950,0.950]


        #     corridor:
        #         filter: { kind_detail: corridor }
        #         draw:
        #             lines:
        #                 order: 1000

        #         early:
        #             filter: { $zoom: { max: 17 } }
        #             draw:
        #                 lines:
        #                     visible: false

        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 # color: [1.000,0.000,0.000]
        #                 outline:
        #                     color: [0.650,0.650,0.650]

        #     tunnel:
        #         filter: { is_tunnel: true }
        #         draw:
        #             lines:
        #                 color: [0.900,0.900,0.900]
        #                 # color: [1.000,0.000,0.000]
        #                 outline:
        #                     color: [0.750,0.750,0.750]

    landuse:
        data: { source: mapzen }
        enabled: true
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    # style: conservation-texture
                    style: national-parks-texture
                    # color: [1.000,0.000,0.000]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        # style: conservation-texture
                        style: national-parks-texture
                        # color: [1.000,0.000,0.000]
                        visible: true


        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    # style: national-parks-texture
                    style: conservation-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: national-forest-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: forest-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    style: parks-texture
                    # color: [1.000,0.000,0.000]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    style: golf-course-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        recreation_ground:
            filter:
                kind: recreation_ground
            draw:
                polygons:
                    style: recreation-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        garden:
            filter:
                kind: garden
            draw:
                polygons:
                    style: garden-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        # hospital:
        #         filter:
        #             kind: hospital
        #         draw:
        #             polygons:
        #                 style: glow-dots
        #                 color: [0.900,0.900,0.900]
        #                 visible: true

        # university:
        #     filter:
        #         all:
        #             - kind: [university, college]
        #             - $zoom: { min: 14 }
        #     draw:
        #         polygons:
        #             style: gradient1
        #             color: [0.900,0.900,0.900]
        #             visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        enabled: true
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: global.order
                color: [0.800,0.800,0.800]

        footprints:
            draw:
                polygons:
                    visible: true
                    style: buildings-texture


            # extrude:
            #     filter:
            #         all:
            #             - $zoom: { min: 15 }
            #             - height: { min: 200 }
            #             - not:
            #                 - layer: [-1, -2, -3, -4, -5]
            #     draw:
            #         polygons:
            #             visible: true
            #             color: [0.500,0.500,0.500]
            #             extrude: global.building_extrude_height


        # in_hospital:
        #     filter:
        #         landuse_kind: hospital
        #     draw:
        #         polygons:
        #             visible: true
        #             style: polygons-transparent
        #             color: [1.000,1.000,1.000,0.5]
        #         lines:
        #             visible: true
        #             width: 1px

        in_university:
            filter:
                landuse_kind: [university, college]
            draw:
                polygons:
                    visible: true
                    style: buildings-universities

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.000,0.000,0.000]


        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [1.000,1.000,1.000], width: 5px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

styles:
    text-blend-order:
        base: text
        blend_order: 1

    no-texture:
        base: polygons

    polygons-transparent:
        base: polygons
        blend: overlay

    buildings-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/buildings-dots6.jpg
                u_scale: 0.6

    buildings-universities:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/buildings-dots8.jpg
                u_scale: 0.6

    lakes-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                # u_customtexture: images/water20.jpg
                u_customtexture: images/water-waves-black4.jpg
                u_scale: 0.6

    national-forest-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green36.jpg
                u_scale: 0.55

    golf-course-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green2.jpg
                u_scale: 0.75

    garden-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green5.jpg
                u_scale: 0.85

    recreation-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green37.jpg
                u_scale: 0.75

    playas-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/water7.jpg
                u_scale: 0.75

    texture:
        base: polygons
        shaders:
            uniforms:
                u_customtexture: images/uv-coords.png
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    color.rgb = TileTexture(u_customtexture,u_scale).rgb;

    # MULTI ZOOM TRANSITION WITH WITH 4 IMAGES/TEXTURES
    texture-4-multi-zooms:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 3
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [12, 14, 17]
                # four textures to cross-fade between
                u_textures:
                    - images/dots2.jpg
                    - images/earth-dots4.jpg
                    - images/park-dots1.jpg
                    - images/park.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    # MULTI ZOOM TRANSITION WITH WITH 4 IMAGES/TEXTURES
    texture-3-multi-zooms:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 2
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [9, 13]
                # four textures to cross-fade between
                u_textures:
                    - images/water8.jpg
                    - images/water7.jpg
                    - images/water5.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 0.5 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    # MULTI ZOOM TRANSITION WITH WITH 2 IMAGES/TEXTURES
    water-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    # - images/water9.jpg
                    # - images/water19.jpg
                    - images/water-waves-black4.jpg
                    - images/water-waves-black4.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                u_scale: 0.5 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    # MULTI ZOOM TRANSITION WITH WITH 3 IMAGES/TEXTURES
    national-parks-texture:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 2
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [12, 18]
                # four textures to cross-fade between
                u_textures:
                    # - images/green5.jpg
                    # - images/green6.jpg
                    # - images/green7.jpg
                    - images/green39.jpg
                    - images/green39.jpg
                    - images/green39.jpg
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 0.85 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    parks-texture:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 2
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [11, 18]
                # four textures to cross-fade between
                u_textures:
                    - images/green46.jpg
                    - images/green48.jpg
                    - images/green48.jpg
                    # - images/green35.jpg
                    # - images/green37.jpg
                    # - images/green37.jpg
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 0.75 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    conservation-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/green6.jpg
                    - images/green5.jpg
                    # - images/green7.jpg
                    # - images/green24.jpg
                    # - images/green24.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                u_scale: 0.75 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    forest-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/green45.jpg
                    - images/green47.jpg
                    # - images/green35.jpg
                    # - images/green37.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                u_scale: 0.55 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    water-boundaries-animated:
        base: lines
        mix: [lines-coast]
        shaders:
            defines:
                COAST_WAVES_ANIMATED: true

    lines-coast:
        base: lines
        animated: false
        texcoords: true
        blend: add
        shaders:
            defines:
                COAST_WAVES_AMOUNT: 5.
                COAST_WAVES_SPEED: 0.1
                COAST_WAVES_ANIMATED: true
            blocks:
                color: |
                    float pct = 0.0;
                    // glow
                    pct = smoothstep(0.,2.,1.-v_texcoord.x);
                    // waves
                    #ifdef COAST_WAVES_ANIMATED
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT+(fract(u_time*COAST_WAVES_SPEED))))*pct;
                    #else
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT))*pct;
                    #endif

                    color *= pct;

    coastline-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: .5
                GLOW_BRIGHTNESS: .5

    textured-lines:
        base: lines
        lighting: false
        material:
            diffuse:
                texture: line-texture
                mapping: uv
        shaders:
            uniforms:
                u_tex: line-texture
            blocks:
                color: |
                    // have to do a fract on the texcoord to get it to repeat over the length of the line
                    color = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // straight texture
                    // color *= texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // tinted
                    //color *= 1. - texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // inverted & tinted
                    //color.a = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))).a; // use texture's alpha

    runway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.80
                GLOW_BRIGHTNESS: .5

    runway-dots:
        base: lines
        mix: [lines-dots-glow]
        animated: true
        shaders:
            defines:
                DOTS_ANIMATE: color.a *=abs(sin(v_texcoord.y+u_time))*1.0
            blocks:
                filter: |
                    #ifdef DOTS_ANIMATE
                    DOTS_ANIMATE;
                    #endif

    highway-dashed:
        base: lines
        dash: [8,10]
        dash_background_color: [0.000,0.000,0.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    highway-dashed-tunnel:
        base: lines
        dash: [8,10]
        dash_background_color: [1.000,1.000,1.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    roads-dashed:
        base: lines
        dash: [18,15]
        dash_background_color: [1.000,1.000,1.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    roads-dashed-tunnel:
        base: lines
        dash: [18,15]
        dash_background_color: [0.900,0.900,0.900]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    highway-casing:
        base: lines
        mix: [functions-aastep, functions-pulse, functions-zoom]
        texcoords: true
        shaders:
            defines:
                ZOOM_START: 16.
                ZOOM_END: 19.

                BACKGROUND_COLOR: vec3(0.086,0.135,0.260)
                # CAST_A_COLOR: vec3(0.541,0.969,0.949)
                CAST_A_COLOR: v_color.rgb
                CAST_A_WIDTH: 0.03
                CAST_A_DIST: mix(0.47,0.34,zoom())
                # CAST_B_COLOR: vec3(0.800,1.000,0.987)
                CAST_B_COLOR: v_color.rgb+vec3(0.259,0.031,0.038)
                CAST_B_WIDTH: 0.07
                CAST_B_DIST: 0.47
            blocks:
                color: |
                    float x = abs(v_texcoord.x-.5);
                    color = mix(vec4(BACKGROUND_COLOR,1), color, aastep(CAST_B_DIST+CAST_B_WIDTH*.5, x));
                    color.rgb = mix(color.rgb, CAST_A_COLOR, aastep(.5, pulse(x, CAST_A_DIST, CAST_A_WIDTH)));
                    color.rgb = mix(color.rgb, CAST_B_COLOR, aastep(.5, pulse(x, CAST_B_DIST, CAST_B_WIDTH)));


    highway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.45
                GLOW_BRIGHTNESS: .25

    roads-glow:
        base: lines
        mix: [functions-zoom, lines-glow]
        shaders:
            defines:
                ZOOM_START: 5.
                ZOOM_END: 6.
                GLOW_WIDTH: mix(1.,.45,zoom())
                GLOW_BRIGHTNESS: zoom()*.22

    lines-glow:
        ui:
            shaders:
                defines:
                    GLOW_WIDTH:
                        type: number
                        label: Solid width
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    GLOW_BRIGHTNESS:
                        type: number
                        label: Glow Brightness
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
        base: lines
        mix: [block, functions-aastep]
        texcoords: true
        blend: add
        shaders:
            defines:
                GLOW_WIDTH: 0.4
                GLOW_BRIGHTNESS: .25
            blocks:
                color: |
                    vec4 glow_tmp_color = color;
                    color = glow_tmp_color*(aastep(GLOW_WIDTH,1.-v_texcoord.x)*aastep(GLOW_WIDTH,v_texcoord.x));
                    color += glow_tmp_color*(sin(v_texcoord.x*PI)*GLOW_BRIGHTNESS);

    lines-dots-glow:
        base: lines
        ui:
            shaders:
                defines:
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_GLOW:
                        type: number
                        label: Glow amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range: 
                            min: 0.
                            max: 2.
                            step: 0.1
        texcoords: true
        blend: overlay
        animated: true
        shaders:
            defines:
                DOTS_SCALE: 2.
                DOTS_SIZE: 0.15
                DOTS_GLOW: .5
            blocks:
                color: |
                    vec2 st = (fract(v_texcoord.xy)-.5)*DOTS_SCALE;
                    float df = dot(st,st);
                    color.a = 1.-step(DOTS_SIZE, df);
                    color.a += smoothstep(1.,0.,df)*(DOTS_GLOW);

    space-tile:
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    functions-zoom:
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }

    functions-easing:
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
