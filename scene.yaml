# Author: Geraldine Sarmiento


# Texture Shaders
# Brett Camper and Peter Richardson
# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    scale: 5.

    # Order functions
    order_add_9: function () { return (feature.sort_rank * 20 + 9); }
    order_add_8: function () { return (feature.sort_rank * 20 + 8); }
    order_add_7: function () { return (feature.sort_rank * 20 + 7); }
    order_add_6: function () { return (feature.sort_rank * 20 + 6); }
    order_add_5: function () { return (feature.sort_rank * 20 + 5); }
    order_add_4: function () { return (feature.sort_rank * 20 + 4); }
    order_add_3: function () { return (feature.sort_rank * 20 + 3); }
    order_add_2: function () { return (feature.sort_rank * 20 + 2); }
    order_add_1: function () { return (feature.sort_rank * 20 + 1); }
    feature_order: function() { return feature.sort_rank; }
    order: function () { return (feature.sort_rank * 20) || 0; }
    order_sub_1: function () { return (feature.sort_rank * 20 - 1); }
    order_sub_2: function () { return (feature.sort_rank * 20 - 2); }
    order_sub_3: function () { return (feature.sort_rank * 20 - 3); }
    order_sub_4: function () { return (feature.sort_rank * 20 - 4); }
    order_sub_5: function () { return (feature.sort_rank * 20 - 5); }
    order_sub_6: function () { return (feature.sort_rank * 20 - 6); }
    order_sub_7: function () { return (feature.sort_rank * 20 - 7); }
    order_sub_8: function () { return (feature.sort_rank * 20 - 8); }
    order_sub_9: function () { return (feature.sort_rank * 20 - 9); }

    pseudoRandomColor: |
        function() {
            return [
                0.5 * (parseInt(feature.id, 12) / 100 % 1),     // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 10000 % 1),   // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

    building_extrude_height: |                  # building extrude height logic
        function() { return feature.height || 70; }

textures:
    line-texture:
        url: images/stipple2-r.png

    red:
        width: 1
        height: 1
        data: [255, 0, 0, 255]

    blue:
        width: 1
        height: 1
        data: [0, 0, 255, 255]

    yellow:
        width: 1
        height: 1
        data: [255, 255, 0, 255]

    purple:
        width: 1
        height: 1
        data: [255, 0, 255, 255]


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                # style: texture-2-multi-zooms
                order: global.feature_order
                color: [1.000,1.000,1.000]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: texture-2-multi-zooms
                # style: texture-terrain-conservation
                order: global.feature_order
                color: [0.000,0.000,0.000]

        # lakes:
        #     filter:
        #         all:
        #             - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
        #         # WARNING: any area filters here must match the area filters in the water-boundaries-not_ocean layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         polygons:
        #             style: water-dots

        # other_areas:
        #     filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 10 }, area: { min: 100 } }
        #     draw:
        #         polygons:
        #             style: water-dots

        # playas:
        #     filter: { kind: playa, $zoom: { min: 4 } }
        #     draw:
        #         polygons:
        #             style: earth-dots2
        #             order: global.feature_order
        #             color: [0.500,0.500,0.500]

        # boundaries:
        #     filter: { boundary: true, kind: ocean }
        #     # don't animate early, save the fan, save the planet!
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 style: coastline-glow
        #                 order: global.feature_order
        #                 width: [[4,0px],[11,2.5px],[14,6px],[16,10px]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round
        #     animated:
        #         filter: { $zoom: { min: 16 } }
        #         draw:
        #             lines:
        #                 style: water-boundaries-animated
        #                 order: global.feature_order
        #                 width: [[16,21px],[18,30px],[20,36]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round

        # boundaries-not_ocean:
        #     filter:
        #         all:
        #             - boundary: true
        #             - not: { kind: [ocean, playa] }
        #             - $zoom: { min: 8 }
        #         # WARNING: any area filters here must match the area filters in the lakes layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         lines:
        #             order: global.feature_order
        #             color: [1.000,1.000,1.000]
        #             width: [[8,0px],[13,1px],[15,1.25px],[20,3px]]
        #             join: round

        #     boundaries-not_ocean-riverbank:
        #         # river boundaries like the thames in london, la seine in paris
        #         filter: { kind: riverbank }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[8,0px],[13,1px],[15,1.25px],[20,8px]]

    roads:
        data: { source: mapzen, layer: roads }
        enabled: false
        draw:
            lines:
                width: 1px
                order: global.feature_order

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [1.000,1.000,1.000]
                    width: 1px
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false
                        color: red
                        width: 1px

        highway:
            filter:
                kind: highway
                $zoom: { min: 8 }
            highway-z8:
                filter:
                    $zoom: { min: 8, max: 11 }
                draw:
                    lines:
                        style: roads-glow
                        color: [1.000,1.000,1.000]
                        width: [[8,4px],[11,9px]]

            highway-z11:
                filter:
                    $zoom: { min: 11 }
                draw:
                    lines:
                        order: global.order
                        color: [1.000,1.000,1.000]
                        width: [[8,0px],[9,0.25px],[10,1px],[12,1px],[13,2px],[14,3px],[15,5px],[16,5px],[17,9px],[18,16px],[19,12px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8,0.5px],[9,1px],[12,1.25px],[15,1.5px],[16,1.5px],[17,0px]]
                    highway-dashed:
                        order: global.order_sub_1
                        color: [0.000,0.000,0.000]
                        width: [[8,0px],[16,8px],[17,15px],[18,22px],[19,23px]]
                    highway-glow:
                        order: global.order_sub_6
                        color: [1.000,1.000,1.000]
                        width: [[11,8px],[13,12px],[16,30px],[17,40px],[18,50px],[19,80px]]
                    # highway-casing:
                    #     order: global.order

                highway-link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            order: global.order_add_1
                            width: [[8,0px],[9,0px],[11,0.25px],[12,0.25px],[13,1px],[14,1.5px],[15,2px],[17,3px],[18,9px],[19,12px],[20,20px]]
                            outline:
                                color: [1.000,1.000,1.000]
                                width: [[8,0px],[9,0.5px],[15,1px],[18,1.5px]]
                        highway-dashed:
                            visible: false
                        # highway-casing:
                        #     visible: false
                        highway-glow:
                            visible: false

                    highway-link-early:
                        filter: { $zoom: { min: 13, max: 15 } }
                        draw:
                            lines:
                                order: 352
                            highway-dashed:
                                visible: false
                        highway-link-early-z17-18:
                            filter: { $zoom: [17, 18]}
                            draw:
                                lines:
                                    visible: false

                highway-tunnel:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: [0.000,0.000,0.000]
                            outline:
                                color: [1.000,1.000,1.000]
                        highway-dashed:
                            visible: true
                            color: [0.000,0.000,0.000]
                        highway-glow:
                            visible: true
                            color: [1.000,1.000,1.000]
                        # highway-casing:
                        #     color: [0.073,0.435,0.908]
                        #     visible: true
                    highway-tunnel-link:
                        filter:
                            is_link: true
                        draw:
                            highway-dashed:
                                visible: false
                            # highway-casing:
                            #     visible: false
                            highway-glow:
                                visible: false

            # Show 0 width roads one zoom before they have width, so they can scale up instead of popping in
            # highway-z17:
            #     filter:
            #         $zoom: { min: 16 }
            #     draw:
            #         highway-casing:
            #             visible: true
            #             order: global.order_sub_2
            #             color: [0.541,0.969,0.949]
            #             width: [[8,0px],[16,10px],[17,18px],[18,34px],[19,45px]]

            # tunnel:
            #     filter: {is_tunnel: true, $zoom: {min: 13} }
            #     draw:
            #         lines:
            #             color: [1.000,1.000,1.000]
            #             outline:
            #                 color: [0.700,0.700,0.700]

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

        # ##### ROADS BLACK START

        # major_road:
        #     filter: { kind: major_road, $zoom: { min: 8 } }
        #     # default style
        #     draw:
        #         lines:
        #             color: [0.000,0.000,0.000]
        #             width: [[13, 1px], [14, 1px]]
        #     trunk_primary:
        #         filter: { kind_detail: [trunk, primary] }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
        #         early:
        #             filter: { $zoom: { max: 16 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #                     outline:
        #                         order: function() { return feature.sort_rank + 2; }
        #             primary:
        #                 filter: { kind: [primary] }
        #                 draw:
        #                     lines:
        #                         outline:
        #                             order: function() { return feature.sort_rank + 1; }
        #         routes:
        #             filter: { ref: true }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
        #             early:
        #                 filter: { $zoom: { max: 16 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 2; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: { is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.500,0.500,0.500]
        #     link:
        #         filter: { is_link: true } # on- and off-ramps, etc
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: 0.5px
        #     tunnel:
        #         filter: { is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 color: [0.500,0.500,0.500]
        #     secondary:
        #         filter: { kind_detail: secondary }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
        #         early:
        #             filter: { $zoom: { max: 16 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px
        #             early:
        #                 filter: { $zoom: { max: 15 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 2; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: {is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.000,0.000,0.000]
        #     tertiary:
        #         filter: { kind_detail: [tertiary, tertiary_link] }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
        #         early:
        #             filter: { $zoom: { max: 15 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px
        #             early:
        #                 filter: { $zoom: { max: 15 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 3; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: { is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.000,0.000,0.000]
        #         link:
        #             filter: { is_link: true } # on- and off-ramps, etc
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px

        # minor_road:
        #     filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
        #     draw:
        #         lines:
        #             color: [0.000,0.000,0.000]
        #             width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 order: 350
        #     round:
        #         filter: { $zoom: { min: 17 } }
        #         draw:
        #             lines:
        #                 cap: round
        #                 join: round

        #     tunnel:
        #         filter: {is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 color: [0.500,0.500,0.500]
        #     minor_road_bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: round

        # path:
        #     filter:
        #         all:
        #             - $zoom: { min: 16 }
        #             - kind: [path, portage_way]
        #         not:
        #             - kind_detail: [steps, track, pier]
        #     draw:
        #         lines:
        #             # style: dashed-lines
        #             color: [0.000,0.000,0.000]
        #             width: [[14, 0.5px], [15, 1.5px], [17, 3m]]

        # #####
        # ##### ROADS BLACK END

        ##### ROADS WHITE START
        #####

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[13, 1px], [14, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 0.5px
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px

        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            tunnel:
                filter: {is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round

        path:
            filter:
                all:
                    - $zoom: { min: 16 }
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    # style: dashed-lines
                    color: [1.000,1.000,1.000]
                    width: [[14, 0.5px], [15, 1.5px], [17, 3m]]


        ##### ROADS WHITE
        ##### END

        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    order: global.feature_order
                    color: [0.800,0.800,0.800]
                    width: 2px
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[12,0px],[15,3px],[20,8px]]
                        outline:
                            width: 0px
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[9,0px],[11,1px],[13,5px],[15,30px],[20,100m]]
                        outline:
                            style: runway-glow
                            color: [0.200,0.200,0.200]
                            width: [[9,2px],[11,3px],[12,2px],[20,12px]]
                runway-detail:
                    filter: { $zoom: { min: 12 } }
                    draw:
                        runway-dots:
                            color: [0.000,0.000,0.000]
                            width: [[12,2px],[15,8px],[20,24px]]

    landuse:
        data: { source: mapzen }
        enabled: true
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: green-areas2
                    color: [1.000,1.000,1.000]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: green-areas2
                        color: [0.300,0.300,0.300]
                        visible: true


        # conservation:
        #     filter:
        #         $zoom: { min: 4 }
        #         kind: [protected_area, nature_reserve, national_park]
        #         not: { protect_class: ['2','3','5']}
        #     draw:
        #         polygons:
        #             style: texture-terrain-conservation
        #             color: [0.300,0.300,0.300]
        #             visible: true

        # national_forest_level_6:
        #     filter:
        #         all:
        #             - kind: forest
        #         any:
        #             - protect_class: ['6']
        #             - operator: ['United States Forest Service']
        #     draw:
        #         polygons:
        #             # style: forest
        #             # style: texture-terrain-park
        #             style: dash-terrain-landuse
        #             color: [0.000,0.000,0.000]
        #             visible: true

        # forest-landcover:
        #     filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
        #     draw:
        #         polygons:
        #             # style: forest
        #             style: texture-terrain-forest
        #             color: [0.300,0.300,0.300]
        #             visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    style: green-areas
                    color: [0.300,0.300,0.300]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: green-areas
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        # golf_course:
        #     filter:
        #         kind: golf_course
        #     draw:
        #         polygons:
        #             # style: landuse-test
        #             # style: terrain-dots
        #             # style: texture-terrain-earth
        #             style: texture-zooms-multi
        #             color: [0.000,0.000,0.000]
        #             visible: true

        # hospital:
        #         filter:
        #             kind: hospital
        #         draw:
        #             polygons:
        #                 style: glow-dots
        #                 color: [0.900,0.900,0.900]
        #                 visible: true

        # university:
        #     filter:
        #         all:
        #             - kind: [university, college]
        #             - $zoom: { min: 14 }
        #     draw:
        #         polygons:
        #             style: gradient1
        #             color: [0.900,0.900,0.900]
        #             visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        enabled: true
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: global.order
                color: [0.800,0.800,0.800]
            # lines:
            #     visible: false
            #     order: global.order_add_1
            #     color: [0.000,0.000,0.000]

        footprints:
            draw:
                polygons:
                    visible: true
                    style: building-dots
                # lines:
                #     visible: true
                #     width: 1px

            extrude:
                filter:
                    all:
                        - $zoom: { min: 15 }
                        - height: { min: 200 }
                        - not:
                            - layer: [-1, -2, -3, -4, -5]
                draw:
                    polygons:
                        visible: true
                        color: [0.500,0.500,0.500]
                        extrude: global.building_extrude_height
                    # lines:
                    #     visible: true
                    #     color: [1.000,1.000,1.000]
                    #     width: [[12, .75px], [18, 1.0px]]
                    #     extrude: global.building_extrude_height

        # in_hospital:
        #     filter:
        #         landuse_kind: hospital
        #     draw:
        #         polygons:
        #             visible: true
        #             style: polygons-transparent
        #             color: [1.000,1.000,1.000,0.5]
        #         lines:
        #             visible: true
        #             width: 1px

        # in_university:
        #     filter:
        #         landuse_kind: [university, college]
        #     draw:
        #         polygons:
        #             visible: true
        #             style: polygons-transparent
        #             color: [1.000,1.000,1.000,0.5]
        #         lines:
        #             visible: true
        #             width: 1px

styles:
    no-texture:
        base: polygons

    polygons-transparent:
        base: polygons
        blend: overlay

    green-areas:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green2.jpg
                u_scale: 0.9

    green-areas2:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/green4.jpg
                u_scale: 0.75

    water-dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/water-dots2.jpg
                u_scale: 0.6

    building-dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/building-dots5.jpg
                u_scale: 0.85

    texture:
        base: polygons
        shaders:
            uniforms:
                u_customtexture: images/uv-coords.png
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    color.rgb = TileTexture(u_customtexture,u_scale).rgb;

    # MULTI ZOOM TRANSITION WITH WITH 4 IMAGES/TEXTURES
    texture-4-multi-zooms:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 3
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [12, 14, 17]
                # four textures to cross-fade between
                u_textures:
                    - images/dots2.jpg
                    - images/earth-dots4.jpg
                    - images/park-dots1.jpg
                    - images/park.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    # MULTI ZOOM TRANSITION WITH WITH 2 IMAGES/TEXTURES
    texture-2-multi-zooms:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/water5.jpg
                    - images/water7.jpg
                u_zoom_fade: [10, 11] # zooms to start/stop cross-fade
                u_scale: 0.5 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    water-boundaries-animated:
        base: lines
        mix: [lines-coast]
        shaders:
            defines:
                COAST_WAVES_ANIMATED: true

    lines-coast:
        base: lines
        animated: false
        texcoords: true
        blend: add
        shaders:
            defines:
                COAST_WAVES_AMOUNT: 5.
                COAST_WAVES_SPEED: 0.1
                COAST_WAVES_ANIMATED: true
            blocks:
                color: |
                    float pct = 0.0;
                    // glow
                    pct = smoothstep(0.,2.,1.-v_texcoord.x);
                    // waves
                    #ifdef COAST_WAVES_ANIMATED
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT+(fract(u_time*COAST_WAVES_SPEED))))*pct;
                    #else
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT))*pct;
                    #endif

                    color *= pct;

    coastline-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: .5
                GLOW_BRIGHTNESS: .5

    textured-lines:
        base: lines
        lighting: false
        material:
            diffuse:
                texture: line-texture
                mapping: uv
        shaders:
            uniforms:
                u_tex: line-texture
            blocks:
                color: |
                    // have to do a fract on the texcoord to get it to repeat over the length of the line
                    color = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // straight texture
                    // color *= texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // tinted
                    //color *= 1. - texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // inverted & tinted
                    //color.a = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))).a; // use texture's alpha

    runway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.80
                GLOW_BRIGHTNESS: .5

    runway-dots:
        base: lines
        mix: [lines-dots-glow]
        animated: true
        shaders:
            defines:
                DOTS_ANIMATE: color.a *=abs(sin(v_texcoord.y+u_time))*1.0
            blocks:
                filter: |
                    #ifdef DOTS_ANIMATE
                    DOTS_ANIMATE;
                    #endif

    highway-dashed:
        base: lines
        dash: [1,1]
        dash_background_color: [1.000,1.000,1.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 11.;

    highway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.45
                GLOW_BRIGHTNESS: .25

    roads-glow:
        base: lines
        mix: [functions-zoom, lines-glow]
        shaders:
            defines:
                ZOOM_START: 5.
                ZOOM_END: 6.
                GLOW_WIDTH: mix(1.,.45,zoom())
                GLOW_BRIGHTNESS: zoom()*.22

    lines-glow:
        ui:
            shaders:
                defines:
                    GLOW_WIDTH:
                        type: number
                        label: Solid width
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    GLOW_BRIGHTNESS:
                        type: number
                        label: Glow Brightness
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
        base: lines
        mix: [block, functions-aastep]
        texcoords: true
        blend: add
        shaders:
            defines:
                GLOW_WIDTH: 0.4
                GLOW_BRIGHTNESS: .25
            blocks:
                color: |
                    vec4 glow_tmp_color = color;
                    color = glow_tmp_color*(aastep(GLOW_WIDTH,1.-v_texcoord.x)*aastep(GLOW_WIDTH,v_texcoord.x));
                    color += glow_tmp_color*(sin(v_texcoord.x*PI)*GLOW_BRIGHTNESS);

    lines-dots-glow:
        base: lines
        ui:
            shaders:
                defines:
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_GLOW:
                        type: number
                        label: Glow amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range: 
                            min: 0.
                            max: 2.
                            step: 0.1
        texcoords: true
        blend: overlay
        animated: true
        shaders:
            defines:
                DOTS_SCALE: 2.
                DOTS_SIZE: 0.15
                DOTS_GLOW: .5
            blocks:
                color: |
                    vec2 st = (fract(v_texcoord.xy)-.5)*DOTS_SCALE;
                    float df = dot(st,st);
                    color.a = 1.-step(DOTS_SIZE, df);
                    color.a += smoothstep(1.,0.,df)*(DOTS_GLOW);

    space-tile:
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    functions-zoom:
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }

    functions-easing:
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
