# Author: Geraldine Sarmiento


# Texture Shaders
# Brett Camper and Peter Richardson
# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    scale: 5.

    # Order functions
    order_add_9: function () { return (feature.sort_rank * 20 + 9); }
    order_add_8: function () { return (feature.sort_rank * 20 + 8); }
    order_add_7: function () { return (feature.sort_rank * 20 + 7); }
    order_add_6: function () { return (feature.sort_rank * 20 + 6); }
    order_add_5: function () { return (feature.sort_rank * 20 + 5); }
    order_add_4: function () { return (feature.sort_rank * 20 + 4); }
    order_add_3: function () { return (feature.sort_rank * 20 + 3); }
    order_add_2: function () { return (feature.sort_rank * 20 + 2); }
    order_add_1: function () { return (feature.sort_rank * 20 + 1); }
    feature_order: function() { return feature.sort_rank; }
    order: function () { return (feature.sort_rank * 20) || 0; }
    order_sub_1: function () { return (feature.sort_rank * 20 - 1); }
    order_sub_2: function () { return (feature.sort_rank * 20 - 2); }
    order_sub_3: function () { return (feature.sort_rank * 20 - 3); }
    order_sub_4: function () { return (feature.sort_rank * 20 - 4); }
    order_sub_5: function () { return (feature.sort_rank * 20 - 5); }
    order_sub_6: function () { return (feature.sort_rank * 20 - 6); }
    order_sub_7: function () { return (feature.sort_rank * 20 - 7); }
    order_sub_8: function () { return (feature.sort_rank * 20 - 8); }
    order_sub_9: function () { return (feature.sort_rank * 20 - 9); }

    pseudoRandomColor: |
        function() {
            return [
                0.5 * (parseInt(feature.id, 12) / 100 % 1),     // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 10000 % 1),   // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

    building_extrude_height: |                  # building extrude height logic
        function() { return feature.height || 70; }

    text_font_family: 'Open Sans'

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff

    Aldrich:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
          url: fonts/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff

    Open Sans:
        - weight: 300 # Light
          url: fonts/OpenSans-Light.woff
        - weight: normal # Regular
          url: fonts/OpenSans-Regular.woff
        - weight: normal # Regular
          style: italic
          url: fonts/OpenSans-Italic.woff
        - weight: 600 # Semi Bold
          url: fonts/OpenSans-Semibold.woff
        - weight: 600 # Semi Bold
          style: italic
          url: fonts/OpenSans-SemiboldItalic.woff
        - weight: bold
          url: fonts/OpenSans-Bold.woff

textures:
    line-texture:
        url: images/stipple2-r.png

    red:
        width: 1
        height: 1
        data: [255, 0, 0, 255]

    blue:
        width: 1
        height: 1
        data: [0, 0, 255, 255]

    yellow:
        width: 1
        height: 1
        data: [255, 255, 0, 255]

    purple:
        width: 1
        height: 1
        data: [255, 0, 255, 255]


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: earth-texture
                order: global.feature_order
                color: [1.000,1.000,1.000]

    water:
        data: { source: mapzen, layer: water }
        # draw:
        #     polygons:
        #         style: water-texture
        #         # style: texture-terrain-conservation
        #         order: global.feature_order
        #         color: [0.000,0.000,0.000]

        lakes:
            filter: { kind: [lake, water, riverbank], $zoom: { min: 4 } }
            draw:
                polygons:
                    order: global.feature_order
                    # style: lakes-texture
                    style: water-texture

        oceans:
            filter: { kind: ocean }
            draw:
                polygons:
                    order: global.feature_order
                    style: water-texture

        swimming-pools:
            filter: { kind: swimming_pool }
            draw:
                polygons:
                    order: global.feature_order
                    style: swimming-pool-noise2
                    color: [1.000,1.000,1.000]
                    visible: true

        reservoir:
            filter: { kind: reservoir }
            draw:
                polygons:
                    order: global.feature_order
                    # style: swimming-pool-noise2
                    color: [0.000,0.000,1.000]
                    visible: true


        # lakes:
        #     filter:
        #         all:
        #             - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
        #         # WARNING: any area filters here must match the area filters in the water-boundaries-not_ocean layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         polygons:
        #             color: blue

        # other_areas:
        #     filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 10 }, area: { min: 100 } }
        #     draw:
        #         polygons:
        #             color: red

        playas:
            filter: { kind: playa, $zoom: { min: 4 } }
            draw:
                polygons:
                    style: playas-texture
                    order: global.feature_order
                    # color: [0.500,0.500,0.500]

        # boundaries:
        #     filter: { boundary: true, kind: ocean }
        #     # don't animate early, save the fan, save the planet!
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 style: coastline-glow
        #                 order: global.feature_order
        #                 width: [[4,0px],[11,2.5px],[14,6px],[16,10px]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round
        #     animated:
        #         filter: { $zoom: { min: 16 } }
        #         draw:
        #             lines:
        #                 style: water-boundaries-animated
        #                 order: global.feature_order
        #                 width: [[16,21px],[18,30px],[20,36]]
        #                 color: [0.600,0.600,0.600]
        #                 join: round

        # boundaries-not_ocean:
        #     filter:
        #         all:
        #             - boundary: true
        #             - not: { kind: [ocean, playa] }
        #             - $zoom: { min: 8 }
        #         # WARNING: any area filters here must match the area filters in the lakes layer
        #         any:
        #             # limit show smaller landuse areas to higher zooms
        #             - { $zoom: { min: 1 },  area: { min: 40000000000 } }
        #             - { $zoom: { min: 2 },  area: { min: 20000000000 } }
        #             # some weird natural earth scale set transition
        #             - { $zoom: { min: 3 },  area: { min: 80000000000 } }
        #             - { $zoom: { min: 4 },  area: { min: 5000000000 } }
        #             - { $zoom: { min: 5 },  area: { min: 700000000 } }
        #             - { $zoom: { min: 6 },  area: { min: 500000000 } }
        #             - { $zoom: { min: 7 },  area: { min: 160000000 } }
        #             - { $zoom: { min: 8 },  area: { min: 40000000 } }
        #             - { $zoom: { min: 9 },  area: { min: 10000000 } }
        #             - { $zoom: { min: 10 }, area: { min: 8000000 } }
        #             - { $zoom: { min: 11 }, area: { min: 2000000 } }
        #             - { $zoom: { min: 12 }, area: { min: 200000 } }
        #             - { $zoom: { min: 13 }, area: { min: 100000 } }
        #             - { $zoom: { min: 14 }, area: { min: 2000 } }
        #             - { $zoom: { min: 15 } }
        #     draw:
        #         lines:
        #             order: global.feature_order
        #             color: [1.000,1.000,1.000]
        #             width: [[8,0px],[13,1px],[15,1.25px],[20,3px]]
        #             join: round

        #     boundaries-not_ocean-riverbank:
        #         # river boundaries like the thames in london, la seine in paris
        #         filter: { kind: riverbank }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[8,0px],[13,1px],[15,1.25px],[20,8px]]

    roads:
        data: { source: mapzen }
        enabled: true
        filter: { not: { kind: rail } }
        draw:
            lines:
                width: 1px
                order: global.order
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15} }
            draw:
                lines:
                    outline:
                        order: global.order
        bridges_and_tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    outline:
                        order: global.order

        natural_earth_roads:
            filter:
                - $zoom: { min: 5, max: 8 }
            draw:
                lines:
                    color: [0.000,0.000,0.000]
                    width: 1px

            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        width: 0.5px

            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        width: 0.5px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false

        highway:
            filter:
                kind: highway
                $zoom: { min: 8 }

            highway-z8:
                filter:
                    $zoom: { min: 8, max: 11 }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                        # color: [1.000,0.000,0.000]
                        width: 1px

            highway-z11:
                filter:
                    $zoom: { min: 11 }
                draw:
                    lines:
                        style: lines
                        order: global.order
                        color: [0.000,0.000,0.000]
                        width: [[8,0px],[18,8px]]
                        outline:
                            color: [1.000,1.000,1.000]
                            width: [[8,0.5px],[12,1.5px],[13,2px],[14,4px],[16,10px],[18,16px]]
                    highway-dashed:
                        style: highway-dashed
                        order: global.order_add_3
                        color: [1.000,1.000,1.000]
                        width: [[8,0px],[11,0.5px],[14,1px],[16,1.5px],[20,2px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8,0.5px],[12,0.5px],[17,4px]]
                    highway-glow:
                        style: lines
                        order: global.order_add_2
                        color: [1.000,1.000,1.000]
                        width: [[11,0.5px],[13,2px],[15,9px],[16,14px],[18,18px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8,0.5px],[13,0.5px],[17,3px]]

                highway-link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            order: global.order_add_1
                            color: [0.000,0.000,0.000]
                            width: [[8,0px],[14,1px],[16,3px],[18,7px]]
                            outline:
                                color: [1.000,1.000,1.000]
                                width: [[8,0px],[13,0px],[18,2px]]
                        highway-dashed:
                            visible: false
                        highway-glow:
                            visible: false

                    highway-link-early:
                        filter: { $zoom: { min: 13, max: 15 } }
                        draw:
                            lines:
                                order: 352
                            highway-dashed:
                                visible: false
                        highway-link-early-z17-18:
                            filter: { $zoom: [17, 18]}
                            draw:
                                lines:
                                    visible: false

                highway-tunnel:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            style: lines
                            color: [0.000,0.000,0.000]
                            outline:
                                color: [1.000,1.000,1.000]
                        highway-dashed:
                            style: highway-dashed-tunnel
                            visible: true
                            color: [0.000,0.000,0.000]
                            outline:
                                color: [1.000,1.000,1.000]
                        highway-glow:
                            visible: true
                            color: [0.950,0.950,0.950]
                    highway-tunnel-link:
                        filter:
                            is_link: true
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
                                outline:
                                    color: [0.150,0.150,0.150]
                            highway-dashed:
                                visible: false
                            highway-glow:
                                visible: false


        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[8, 0.5px], [15, 0.5px], [16, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        style: lines
                        order: global.order
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [14, 0.1px], [15, 1px], [16, 3px], [18, 12px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8, 0.15px], [10, 0.25px], [14, 0.5px], [15, 1px]]
                    roads-dashed:
                        style: roads-dashed
                        order: global.order_add_1
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [16, 0px], [18, 2.5px]]

                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 0px], [12, 0.1px], [14, 2px], [16, 4px], [18, 18px]]
                            outline:
                                color: [0.000,0.000,0.000]
                                width: [[8, 0.15px], [10, 0.25px], [12, 1px], [13, 1px]]
                        roads-dashed:
                            color: [1.000,1.000,1.000]

                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.000,0.000,0.000]
                            roads-dashed:
                                style: roads-dashed-tunnel
                                color: [1.000,1.000,1.000]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [14, 0.1px], [15, 0.5px], [16, 1.5px], [18, 6px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8, 0.15px], [10, 0.25px], [14, 0.5px], [15, 1px]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
                    roads-dashed:
                        style: roads-dashed-tunnel
                        order: global.order_add_1
                        color: [1.000,1.000,1.000]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        style: lines
                        order: global.order
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [14, 0.1px], [15, 1px], [16, 3px], [18, 12px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8, 0.15px], [10, 0.25px], [14, 0.5px], [15, 1px]]
                    roads-dashed:
                        style: roads-dashed
                        order: global.order_add_1
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [16, 0px], [18, 2.5px]]
                
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 0px], [14, 0.1px], [15, 1px], [16, 3px], [18, 12px]]
                            outline:
                                color: [0.000,0.000,0.000]
                        roads-dashed:
                            color: [1.000,1.000,1.000]
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [0.000,0.000,0.000]
                            roads-dashed:
                                style: roads-dashed-tunnel
                                color: [1.000,1.000,1.000]

            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[8, 0px], [15, 0.1px], [16, 2px], [20, 12px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8, 0.15px], [13, 0.15px], [15, 0.5px], [17, 1px]]
                    roads-dashed:
                        visible: false
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                        roads-dashed:
                            visible: true

                    tunnel:
                        filter: { is_tunnel: true }
                        draw:
                            lines:
                                color: [0.000,0.000,0.000]
                                outline:
                                    color: [1.000,1.000,1.000]

                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 0.5px], [16, 1.5px], [18, 12px]]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 0px], [15, 0.1px], [16, 1px], [20, 6px]]
                            outline:
                                color: [0.000,0.000,0.000]
                                width: [[8, 0.15px], [13, 0.15px], [15, 0.5px], [17, 1px]]

        minor_road:
            filter:
                kind: minor_road
                not: { kind_detail: service }
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[8, 0px], [15, 0.1px], [16, 2px], [20, 12px]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[8, 0.15px], [13, 0.15px], [15, 0.5px], [17, 1px]]

        service_road:
            filter: { kind: minor_road, kind_detail: service }
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[8, 0px], [15, 0.1px], [16, 1px], [20, 7px]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[8, 0.15px], [15, 0.5px], [17, 1px]]

        path:
            filter:
                all:
                    - kind: [path,portage_way]
                not:
                    - kind_detail: [steps,track,pier]
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[15, 0px], [20, 7px]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[14, 0.25px], [16, 0.5px], [20, 0.25px]]
                        dash: [0.65, 0.2]
                        dash_background_color: [1.000,1.000,1.000]

            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[15, 0px], [20, 7px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[14, 0.25px], [16, 0.5px], [20, 0.25px]]
                            dash: [0.65, 0.2]
                            dash_background_color: [1.000,1.000,1.000]

            footway:
                filter: { kind_detail: footway }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[15, 0px], [20, 7px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[14, 0.25px], [16, 0.5px], [20, 0.25px]]
                            dash: [0.65, 0.2]
                            dash_background_color: [1.000,1.000,1.000]


        #     corridor:
        #         filter: { kind_detail: corridor }
        #         draw:
        #             lines:
        #                 order: 1000

        #         early:
        #             filter: { $zoom: { max: 17 } }
        #             draw:
        #                 lines:
        #                     visible: false

        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 # color: [1.000,0.000,0.000]
        #                 outline:
        #                     color: [0.650,0.650,0.650]

        #     tunnel:
        #         filter: { is_tunnel: true }
        #         draw:
        #             lines:
        #                 color: [0.900,0.900,0.900]
        #                 # color: [1.000,0.000,0.000]
        #                 outline:
        #                     color: [0.750,0.750,0.750]

    landuse:
        data: { source: mapzen }
        enabled: true
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: national-parks-texture
                    # color: [1.000,0.000,0.000]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: national-parks-texture
                        # color: [1.000,0.000,0.000]
                        visible: true


        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: conservation-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: national-forest-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: forest-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    style: parks-texture
                    # color: [1.000,0.000,0.000]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    style: golf-course-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        recreation_ground:
            filter:
                kind: recreation_ground
            draw:
                polygons:
                    style: recreation-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        garden:
            filter:
                kind: garden
            draw:
                polygons:
                    style: garden-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        beach:
            filter:
                kind: beach
            draw:
                polygons:
                    style: beach-texture
                    visible: true

        farm:
            filter:
                kind: [farm, farmland]
                $zoom: { min: 10}
            draw:
                polygons:
                    style: farms-texture
                    # color: [1.000,0.000,0.000]
                    visible: true

        pedestrian:
            filter:
                kind: [pedestrian,common,footway]
            draw:
                polygons:
                    style: grid-gradient-pedestrian
                    color: [0.000,1.000,0.000]
                    visible: true
            # green-stuff:
            #     filter:
            #         surface: [grass]
            #     draw:
            #         polygons:
            #             style: dots
            #             color: global.lighter_color

        man-made:
            filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
            draw:
                polygons:
                    style: stripes-man-made-overlap-horizontal
                    # style: man-made-texture
                    color: [0.000,0.000,0.000]
                    visible: true
            pier:
                filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline] }
                draw:
                    polygons:
                        # color: [1.000,0.000,0.000]
                        visible: true

        # hospital:
        #         filter:
        #             kind: hospital
        #         draw:
        #             polygons:
        #                 style: glow-dots
        #                 color: [0.900,0.900,0.900]
        #                 visible: true

        # university:
        #     filter:
        #         all:
        #             - kind: [university, college]
        #             - $zoom: { min: 14 }
        #     draw:
        #         polygons:
        #             style: gradient1
        #             color: [0.900,0.900,0.900]
        #             visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        enabled: true
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: global.order
                color: [0.800,0.800,0.800]

        footprints:
            draw:
                polygons:
                    visible: true
                    # style: buildings-texture3
                    # style: buildings-texture2
                    # style: buildings-texture
                    style: grid-gradient-buildings


            # extrude:
            #     filter:
            #         all:
            #             - $zoom: { min: 15 }
            #             - height: { min: 200 }
            #             - not:
            #                 - layer: [-1, -2, -3, -4, -5]
            #     draw:
            #         polygons:
            #             visible: true
            #             color: [0.500,0.500,0.500]
            #             extrude: global.building_extrude_height


        # in_hospital:
        #     filter:
        #         landuse_kind: hospital
        #     draw:
        #         polygons:
        #             visible: true
        #             style: polygons-transparent
        #             color: [1.000,1.000,1.000,0.5]
        #         lines:
        #             visible: true
        #             width: 1px

        in_university:
            filter:
                landuse_kind: [university, college]
            draw:
                polygons:
                    visible: true
                    style: buildings-universities

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.000,0.000,0.000]


        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [1.000,1.000,1.000], width: 5px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

styles:
    text-blend-order:
        base: text
        blend_order: 1

    no-texture:
        base: polygons

    polygons-transparent:
        base: polygons
        blend: overlay

    grid-gradient-buildings:
        base: polygons
        mix: [grid-gradient5]
        shaders:
            uniforms:
                u_colors:
                    - [1.000,1.000,1.000] # lower-left
                    - [1.000,1.000,1.000] # lower-right
                    - [1.000,1.000,1.000] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-pedestrian:
        base: polygons
        mix: [grid-gradient1]
        shaders:
            uniforms:
                u_colors:
                    # - [1.000,1.000,1.000] # lower-left
                    # - [0.000,0.000,0.000] # lower-right
                    # - [1.000,1.000,1.000] # upper-left
                    # - [0.000,0.000,0.000] # upper-right
                    - [0.000,0.000,0.000] # lower-left
                    - [1.000,1.000,1.000] # lower-right
                    - [0.000,0.000,0.000] # upper-left
                    - [1.000,1.000,1.000] # upper-right

    grid-gradient5:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 5
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y/0.15
                    );

    grid-gradient1:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 15
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x*5.0),
                        mix(u_colors[2], u_colors[3], f_st.x*1.5),
                        f_st.y/0.65
                    );

    buildings-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/buildings-dots6.jpg
                u_scale: 0.6

    buildings-texture2:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/building-dots4.jpg
                u_scale: 1.0

    buildings-texture3:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/buildings-dots8.jpg
                u_scale: 0.75

    earth-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/earth-dots12.jpg
                u_scale: 1.0

    buildings-universities:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/buildings-dots10.jpg
                u_scale: 1.00

    lakes-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                # u_customtexture: images/water20.jpg
                u_customtexture: images/water-waves-black5.jpg
                u_scale: 0.6

    farms-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/farm1.jpg
                u_scale: 0.65
                # u_scale: 0.85

    man-made-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/man-made5.jpg
                u_scale: 0.5
                # u_scale: 0.85

    national-parks-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/national-parks.jpg
                u_scale: 0.65
                # u_scale: 0.85

    national-forest-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/national-forest1.jpg
                u_scale: 0.55

    golf-course-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/golf3.jpg
                u_scale: 0.5

    garden-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/garden2.jpg
                u_scale: 0.4

    beach-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/beach2a.jpg
                u_scale: 0.75

    recreation-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/recreation.jpg
                u_scale: 0.5

    playas-texture:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/water7.jpg
                u_scale: 0.55

    texture:
        base: polygons
        shaders:
            uniforms:
                u_customtexture: images/uv-coords.png
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    color.rgb = TileTexture(u_customtexture,u_scale).rgb;

    # MULTI ZOOM TRANSITION WITH WITH 4 IMAGES/TEXTURES
    texture-4-multi-zooms:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 3
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [12, 14, 17]
                # four textures to cross-fade between
                u_textures:
                    - images/dots2.jpg
                    - images/earth-dots4.jpg
                    - images/park-dots1.jpg
                    - images/park.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    # MULTI ZOOM TRANSITION WITH WITH 4 IMAGES/TEXTURES
    texture-3-multi-zooms:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 2
            uniforms:
                # zooms to start/stop cross-fade
                u_zoom_stops: [9, 13]
                # four textures to cross-fade between
                u_textures:
                    - images/water8.jpg
                    - images/water7.jpg
                    - images/water5.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 0.5 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    # MULTI ZOOM TRANSITION WITH WITH 2 IMAGES/TEXTURES
    water-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    # - images/water9.jpg
                    - images/water23.jpg
                    # - images/water-waves-black8.jpg
                    - images/water-waves-black8.jpg
                    # - images/water-big3.jpg
                    # - images/water-big3.jpg
                u_zoom_fade: [5, 6] # zooms to start/stop cross-fade
                u_scale: 0.5 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    parks-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/parks.jpg
                    - images/parks2.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                # u_scale: 0.75 # number of times to repeat texture in a tile
                u_scale: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    
    conservation-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/conservation1.jpg
                    - images/conservation3.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                u_scale: 0.75 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    forest-texture:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/forest3.jpg
                    - images/forest4.jpg
                u_zoom_fade: [11, 12] # zooms to start/stop cross-fade
                u_scale: 0.3 # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .25;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    water-boundaries-animated:
        base: lines
        mix: [lines-coast]
        shaders:
            defines:
                COAST_WAVES_ANIMATED: true

    lines-coast:
        base: lines
        animated: false
        texcoords: true
        blend: add
        shaders:
            defines:
                COAST_WAVES_AMOUNT: 5.
                COAST_WAVES_SPEED: 0.1
                COAST_WAVES_ANIMATED: true
            blocks:
                color: |
                    float pct = 0.0;
                    // glow
                    pct = smoothstep(0.,2.,1.-v_texcoord.x);
                    // waves
                    #ifdef COAST_WAVES_ANIMATED
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT+(fract(u_time*COAST_WAVES_SPEED))))*pct;
                    #else
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT))*pct;
                    #endif

                    color *= pct;

    coastline-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: .5
                GLOW_BRIGHTNESS: .5

    textured-lines:
        base: lines
        lighting: false
        material:
            diffuse:
                texture: line-texture
                mapping: uv
        shaders:
            uniforms:
                u_tex: line-texture
            blocks:
                color: |
                    // have to do a fract on the texcoord to get it to repeat over the length of the line
                    color = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // straight texture
                    // color *= texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // tinted
                    //color *= 1. - texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // inverted & tinted
                    //color.a = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))).a; // use texture's alpha

    runway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.80
                GLOW_BRIGHTNESS: .5

    runway-dots:
        base: lines
        mix: [lines-dots-glow]
        animated: true
        shaders:
            defines:
                DOTS_ANIMATE: color.a *=abs(sin(v_texcoord.y+u_time))*1.0
            blocks:
                filter: |
                    #ifdef DOTS_ANIMATE
                    DOTS_ANIMATE;
                    #endif

    highway-dashed:
        base: lines
        dash: [8,10]
        dash_background_color: [0.000,0.000,0.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    highway-dashed-tunnel:
        base: lines
        dash: [8,10]
        dash_background_color: [1.000,1.000,1.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    roads-dashed:
        base: lines
        dash: [12,9]
        dash_background_color: [0.000,0.000,0.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    roads-dashed-tunnel:
        base: lines
        dash: [12,9]
        dash_background_color: [0.000,0.000,0.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 4.;

    highway-casing:
        base: lines
        mix: [functions-aastep, functions-pulse, functions-zoom]
        texcoords: true
        shaders:
            defines:
                ZOOM_START: 16.
                ZOOM_END: 19.

                BACKGROUND_COLOR: vec3(0.086,0.135,0.260)
                # CAST_A_COLOR: vec3(0.541,0.969,0.949)
                CAST_A_COLOR: v_color.rgb
                CAST_A_WIDTH: 0.03
                CAST_A_DIST: mix(0.47,0.34,zoom())
                # CAST_B_COLOR: vec3(0.800,1.000,0.987)
                CAST_B_COLOR: v_color.rgb+vec3(0.259,0.031,0.038)
                CAST_B_WIDTH: 0.07
                CAST_B_DIST: 0.47
            blocks:
                color: |
                    float x = abs(v_texcoord.x-.5);
                    color = mix(vec4(BACKGROUND_COLOR,1), color, aastep(CAST_B_DIST+CAST_B_WIDTH*.5, x));
                    color.rgb = mix(color.rgb, CAST_A_COLOR, aastep(.5, pulse(x, CAST_A_DIST, CAST_A_WIDTH)));
                    color.rgb = mix(color.rgb, CAST_B_COLOR, aastep(.5, pulse(x, CAST_B_DIST, CAST_B_WIDTH)));


    highway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.45
                GLOW_BRIGHTNESS: .25

    roads-glow:
        base: lines
        mix: [functions-zoom, lines-glow]
        shaders:
            defines:
                ZOOM_START: 5.
                ZOOM_END: 6.
                GLOW_WIDTH: mix(1.,.45,zoom())
                GLOW_BRIGHTNESS: zoom()*.22

    stripes-man-made-overlap-horizontal:
        base: polygons
        mix: [functions-aastep, patterns-stripes, space-screen]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_WIDTH2: .995
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 1.0
                STRIPES_ANGLE: 1.570796325
                STRIPES_ANGLE2: 3.14159265
            blocks:
                # color: |
                #     vec2 st = getScreenNonStretchCoords();
                #     color.rgb = mix(color.rgb,mix(vec3(0.000,1.000,0.000),vec3(0.000,0.000,1.000),stripes(st*50.,
                #                         STRIPES_WIDTH2,
                #                         STRIPES_ANGLE)),stripes(st*50.,
                #                         STRIPES_WIDTH,
                #                         STRIPES_ANGLE2));

                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(mix(vec3(1.000,1.000,1.000),vec3(0.000,0.000,0.000),stripes(st*30.,
                                        STRIPES_WIDTH2,
                                        STRIPES_ANGLE)),color.rgb,stripes(st*30.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE2));

    swimming-pool-noise:
        base: polygons
        mix: [space-tile, generative-noise, patterns-stripes, pattern-noise]
        shaders:
            defines:
                STRIPES_WIDTH: .3
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 5.
                STRIPES_ANGLE: 3.14159265
            uniforms:
                u_noise_freq: 0.0006
                u_noise_scale: 0.45
                u_background_color: [0.000,0.000,0.000]
            blocks:
                color: |
                    float a = stripes(patternNoiseCoords() * STRIPES_SCALE,
                                    STRIPES_WIDTH,
                                    STRIPES_ANGLE);
                    color.rgb = mix(color.rgb, u_background_color, a);

    swimming-pool-noise2:
        base: polygons
        mix: [space-tile, generative-noise, patterns-stripes, pattern-noise]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_WIDTH2: .75
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 5.
                STRIPES_SCALE2: 8.
                STRIPES_ANGLE: 3.14159265
            uniforms:
                u_noise_freq: 0.0005
                u_noise_scale: 0.75
                u_background_color: [0.000,0.000,0.000]
                u_background_color2: [0.350,0.350,0.350]
            blocks:
                color: |
                    float a = stripes(patternNoiseCoords() * STRIPES_SCALE,STRIPES_WIDTH,STRIPES_ANGLE);
                    float b = stripes(patternNoiseCoords() * STRIPES_SCALE2,STRIPES_WIDTH2,STRIPES_ANGLE);
                    color.rgb = mix(mix(color.rgb, u_background_color2, b), u_background_color, a);

    space-screen:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the coordinates in screen space streaching the proportion ('vec2 getScreenCoords ()') or non-streatching the proportion ('getScreenNonStretchCoords ()')
            examples:
                press:
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 136-145
                radar:
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
                    lines: 0-143
        test:
            screen:
                blocks:
                    color: |
                        vec2 st = getScreenCoords();
                        color.rg += fract(st*3.);
            screen_nonstretch:
                blocks:
                    color: |
                        vec2 st = getScreenNonStretchCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 getScreenCoords () {
                        return gl_FragCoord.xy / u_resolution.xy;
                    }

                    vec2 getScreenNonStretchCoords () {
                        vec2 st = getScreenCoords();
                        if (u_resolution.y > u_resolution.x ) {
                            st.y *= u_resolution.y/u_resolution.x;
                            st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;
                        } else {
                            st.x *= u_resolution.x/u_resolution.y;
                            st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
                        } 
                        return st;
                    }
                    #endif

    pattern-noise:
        mix: [space-tile, generative-noise]
        shaders:
            uniforms:
                u_noise_freq: 0.002
                u_noise_scale: 0.03
            blocks:
                global: |
                    vec2 patternNoiseCoords() {
                        float zbase = u_tile_origin.z - 12.;
                        vec2 st = fract(
                            v_pos.xy +
                            noise(worldPosition().xy * u_noise_freq * exp2(zbase)) * u_noise_scale
                        );
                        return st;
                    }

    lines-glow:
        ui:
            shaders:
                defines:
                    GLOW_WIDTH:
                        type: number
                        label: Solid width
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    GLOW_BRIGHTNESS:
                        type: number
                        label: Glow Brightness
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
        base: lines
        mix: [block, functions-aastep]
        texcoords: true
        blend: add
        shaders:
            defines:
                GLOW_WIDTH: 0.4
                GLOW_BRIGHTNESS: .25
            blocks:
                color: |
                    vec4 glow_tmp_color = color;
                    color = glow_tmp_color*(aastep(GLOW_WIDTH,1.-v_texcoord.x)*aastep(GLOW_WIDTH,v_texcoord.x));
                    color += glow_tmp_color*(sin(v_texcoord.x*PI)*GLOW_BRIGHTNESS);

    lines-dots-glow:
        base: lines
        ui:
            shaders:
                defines:
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_GLOW:
                        type: number
                        label: Glow amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range: 
                            min: 0.
                            max: 2.
                            step: 0.1
        texcoords: true
        blend: overlay
        animated: true
        shaders:
            defines:
                DOTS_SCALE: 2.
                DOTS_SIZE: 0.15
                DOTS_GLOW: .5
            blocks:
                color: |
                    vec2 st = (fract(v_texcoord.xy)-.5)*DOTS_SCALE;
                    float df = dot(st,st);
                    color.a = 1.-step(DOTS_SIZE, df);
                    color.a += smoothstep(1.,0.,df)*(DOTS_GLOW);

    space-tile:
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    functions-zoom:
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }

    functions-easing:
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)


    generative-noise:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of Noise functions.
                For more information on this theme read [this chapter of The Book of Shaders about Noise](http://thebookofshaders.com/11/).
        test:
            noise_float: { blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2: { blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3: { blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy*2.,u_time));" } }
            gnoise_vec2: { blocks: { color: "    color.rgb += gnoise(v_texcoord.xy*2.);" } }
            gnoise_vec3: { blocks: { color: "    color.rgb += gnoise(vec3(v_texcoord.xy*2.,u_time));" } }
            snoise_vec2: { blocks: { color: "    color.rgb += snoise(v_texcoord.xy*2.);" } }
            snoise_vec3: { blocks: { color: "    color.rgb += snoise(vec3(v_texcoord.xy*2.,u_time));" } }
            noise_float_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy,u_time)*2.);" } }

        mix: generative-random
        shaders:
            defines:
                NOISE_TEXSAMPLE_SIZE: 256.0
            blocks:
                global: |
                    // Value Noise 
                    float noise (in float x) {
                        #ifdef NOISE_TEXSAMPLE
                        return texture2D(u_random, vec2(x*(1./NOISE_TEXSAMPLE_SIZE))).r;
                        #else
                        float i = floor(x);
                        float f = fract(x);
                        f = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), f);
                        #endif
                    }

                    // Value Noise
                    float noise (vec2 p) {
                        vec2 i = floor(p);
                        vec2 f = fract(p);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = i.xy + f.xy*f.xy*(3.0-2.0*f.xy);
                        return texture2D(u_random, fract((uv+118.4)/NOISE_TEXSAMPLE_SIZE) ).x;
                        #else
                        f = f * f * (3.0 - 2.0 * f);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        return mix(a, b, f.x) + (c - a) * f.y * (1.0 - f.x) + (d - b) * f.x * f.y;
                        #endif
                    }

                    // Value Noise
                    float noise (vec3 p) {
                        vec3 i = floor(p);
                        vec3 f = fract(p);
                        f = f*f*(3.0-2.0*f);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;
                        vec2 rg = texture2D(u_random, fract((uv+.5)/NOISE_TEXSAMPLE_SIZE), -100.0 ).yx;
                        return mix( rg.x, rg.y, f.z );
                        #else
                        float n = i.x + i.y*57.0 + 113.0*i.z;
                        return mix(mix(mix(random(n+0.0),random(n+1.0),f.x),mix(random(n+ 57.0),random(n+ 58.0),f.x),f.y),mix(mix(random(n+113.0),random(n+114.0),f.x),mix(random(n+170.0),random(n+171.0),f.x),f.y),f.z);
                        /*
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        float n = dot(i, step);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))), f.x),
                                        f.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                            random(n + dot(step, vec3(1,0,1))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))), f.x),
                                    f.y),
                                f.z);
                                */
                        #endif
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/XdXGW8)
                    float gnoise (in vec2 p) {
                        vec2 i = floor( p );
                        vec2 f = fract( p );
                        
                        vec2 u = f*f*(3.0-2.0*f);

                        return mix( mix( dot( random2( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                                         dot( random2( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                                    mix( dot( random2( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                                         dot( random2( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/Xsl3Dl)
                    float gnoise (in vec3 p) {
                        vec3 i = floor( p );
                        vec3 f = fract( p );
                        vec3 u = f*f*(3.0-2.0*f);

                        return mix( mix( mix( dot( random3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
                                    mix( mix( dot( random3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
                    }

                    vec3 mod289(vec3 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec2 mod289(vec2 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec3 permute(vec3 x) { 
                        return mod289(((x*34.0)+1.0)*x); 
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    float snoise(vec2 v) {

                        // Precompute values for skewed triangular grid
                        const vec4 C = vec4(0.211324865405187,
                                            // (3.0-sqrt(3.0))/6.0
                                            0.366025403784439,  
                                            // 0.5*(sqrt(3.0)-1.0)
                                            -0.577350269189626,  
                                            // -1.0 + 2.0 * C.x
                                            0.024390243902439); 
                                            // 1.0 / 41.0

                        // First corner (x0)
                        vec2 i  = floor(v + dot(v, C.yy));
                        vec2 x0 = v - i + dot(i, C.xx);

                        // Other two corners (x1, x2)
                        vec2 i1 = vec2(0.0);
                        i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
                        vec2 x1 = x0.xy + C.xx - i1;
                        vec2 x2 = x0.xy + C.zz;

                        // Do some permutations to avoid
                        // truncation effects in permutation
                        i = mod289(i);
                        vec3 p = permute(
                                permute( i.y + vec3(0.0, i1.y, 1.0))
                                    + i.x + vec3(0.0, i1.x, 1.0 ));

                        vec3 m = max(0.5 - vec3(
                                            dot(x0,x0), 
                                            dot(x1,x1), 
                                            dot(x2,x2)
                                            ), 0.0);

                        m = m*m ;
                        m = m*m ;

                        // Gradients: 
                        //  41 pts uniformly over a line, mapped onto a diamond
                        //  The ring size 17*17 = 289 is close to a multiple 
                        //      of 41 (41*7 = 287)

                        vec3 x = 2.0 * fract(p * C.www) - 1.0;
                        vec3 h = abs(x) - 0.5;
                        vec3 ox = floor(x + 0.5);
                        vec3 a0 = x - ox;

                        // Normalise gradients implicitly by scaling m
                        // Approximation of: m *= inversesqrt(a0*a0 + h*h);
                        m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

                        // Compute final noise value at P
                        vec3 g = vec3(0.0);
                        g.x  = a0.x  * x0.x  + h.x  * x0.y;
                        g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
                        return 130.0 * dot(m, g);
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }

    generative-random:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of functions about random.
                For more information on this theme read [this chapter of The Book of Shaders about Random](http://thebookofshaders.com/10/).
        test:
            random_float: { blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2: { blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3: { blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2: { blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2: { blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3: { blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }
            random_float_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }
            
        shaders:
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
            blocks:
                global: |
                    vec3 random3 (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return texture2D(u_random,fract(p*2.),-100.).rgb;
                        #else
                        return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) ))*43758.5453); 
                        #endif
                    }
                    vec3 random3 (vec3 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        vec2 uv = fract(p.xy+vec2(37.0,17.0)*p.z);
                        return texture2D(u_random, fract(uv*2.), -100.0).rgb;
                        #else
                        float j = 4096.0*sin(dot(p,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                        #endif
                    }
                    vec2 random2 (vec2 p) { 
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).rg;
                        #else
                        return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453); 
                        #endif
                    }
                    float random (float x) { 
                        return fract(sin(x)*43758.5453);
                    }
                    float random (vec2 p) { 
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); 
                        #endif
                    }
                    float random (vec3 p) { 
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123); 
                        #endif
                    }

    patterns-stripes:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Collection of functions to draw stripes. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
            examples:
                grain-area:
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain-area.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain-area.png
                    lines: 26
                press:
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 150
                radar:
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
        mix: [functions-aastep, geometry-matrices]
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st) {
                        return abs(sin(st.y*PI));
                    }

                    // Adjustable width stripes
                    float stripes (vec2 st, float width) {
                        return aastep(width, stripesDF(st));
                    }

                    // Adjustable Angle
                    float stripes (vec2 st, float width, float angle) {
                        st = rotate2D(angle) * st;
                        return stripes(st, width);
                    }

                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }

                    // Faster optimisation of diagonal stripes with controlable width
                    float diagonalStripes (vec2 st, float width) {
                        st.y -= st.x;
                        return stripes(st, width);
                    }

    geometry-matrices:
        mix: [block]
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Useful set of functions to construct scale, rotation and translation of 2, 3 or 4 dimensions. For more information about matrices read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 rotate2D (vec2 st, float a) {
                        return (rotate2D(a)*(st-.5))+.5;
                    }
                    #endif
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    //
                    // Scale 4 dimensions
                    // ================================
                    mat4 scale4D (float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }
                    //
                    // Translate in 4 dimensions
                    mat4 translate4D (float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }

